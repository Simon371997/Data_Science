{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e2b8c566",
   "metadata": {},
   "source": [
    "# Image Classification - Simpsons Characters\n",
    "\n",
    "Dataset: https://www.kaggle.com/datasets/alexattia/the-simpsons-characters-dataset\n",
    "Image Data + CSV with information about the dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e0f7ed2",
   "metadata": {},
   "source": [
    "##  I. Problem Understandig / Data Generation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "841691f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f88fbd04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>name</th>\n",
       "      <th>total</th>\n",
       "      <th>train</th>\n",
       "      <th>test</th>\n",
       "      <th>bounding_box</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Homer Simpson</td>\n",
       "      <td>2246</td>\n",
       "      <td>1909</td>\n",
       "      <td>337</td>\n",
       "      <td>612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Ned Flanders</td>\n",
       "      <td>1454</td>\n",
       "      <td>1236</td>\n",
       "      <td>218</td>\n",
       "      <td>595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Moe Szyslak</td>\n",
       "      <td>1452</td>\n",
       "      <td>1234</td>\n",
       "      <td>218</td>\n",
       "      <td>215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Lisa Simpson</td>\n",
       "      <td>1354</td>\n",
       "      <td>1151</td>\n",
       "      <td>203</td>\n",
       "      <td>562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Bart Simpson</td>\n",
       "      <td>1342</td>\n",
       "      <td>1141</td>\n",
       "      <td>201</td>\n",
       "      <td>554</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0           name  total  train  test  bounding_box\n",
       "0           0  Homer Simpson   2246   1909   337           612\n",
       "1           1   Ned Flanders   1454   1236   218           595\n",
       "2           2    Moe Szyslak   1452   1234   218           215\n",
       "3           3   Lisa Simpson   1354   1151   203           562\n",
       "4           4   Bart Simpson   1342   1141   201           554"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('number_of_pics.csv')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fb51599f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 47 entries, 0 to 46\n",
      "Data columns (total 6 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   Unnamed: 0    47 non-null     int64 \n",
      " 1   name          47 non-null     object\n",
      " 2   total         47 non-null     int64 \n",
      " 3   train         47 non-null     int64 \n",
      " 4   test          47 non-null     int64 \n",
      " 5   bounding_box  47 non-null     int64 \n",
      "dtypes: int64(5), object(1)\n",
      "memory usage: 2.3+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e8693f99",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.85%\n"
     ]
    }
   ],
   "source": [
    "data.head()\n",
    "train_test_split = data['train'][0]/data['total'][0]\n",
    "print(str(round(train_test_split, 2)) + '%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "428a2387",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>total</th>\n",
       "      <th>train</th>\n",
       "      <th>test</th>\n",
       "      <th>bounding_box</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>47.000000</td>\n",
       "      <td>47.000000</td>\n",
       "      <td>47.000000</td>\n",
       "      <td>47.000000</td>\n",
       "      <td>47.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>23.000000</td>\n",
       "      <td>445.382979</td>\n",
       "      <td>378.574468</td>\n",
       "      <td>66.808511</td>\n",
       "      <td>143.659574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>13.711309</td>\n",
       "      <td>566.607201</td>\n",
       "      <td>481.583698</td>\n",
       "      <td>85.023945</td>\n",
       "      <td>217.416378</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>11.500000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>30.500000</td>\n",
       "      <td>5.500000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>23.000000</td>\n",
       "      <td>106.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>34.500000</td>\n",
       "      <td>895.000000</td>\n",
       "      <td>760.500000</td>\n",
       "      <td>134.500000</td>\n",
       "      <td>212.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>46.000000</td>\n",
       "      <td>2246.000000</td>\n",
       "      <td>1909.000000</td>\n",
       "      <td>337.000000</td>\n",
       "      <td>650.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0        total        train        test  bounding_box\n",
       "count   47.000000    47.000000    47.000000   47.000000     47.000000\n",
       "mean    23.000000   445.382979   378.574468   66.808511    143.659574\n",
       "std     13.711309   566.607201   481.583698   85.023945    217.416378\n",
       "min      0.000000     0.000000     0.000000    0.000000      0.000000\n",
       "25%     11.500000    36.000000    30.500000    5.500000      0.000000\n",
       "50%     23.000000   106.000000    90.000000   16.000000      0.000000\n",
       "75%     34.500000   895.000000   760.500000  134.500000    212.500000\n",
       "max     46.000000  2246.000000  1909.000000  337.000000    650.000000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "67ac67c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0      0\n",
       "name            0\n",
       "total           0\n",
       "train           0\n",
       "test            0\n",
       "bounding_box    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "868797a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>name</th>\n",
       "      <th>total</th>\n",
       "      <th>train</th>\n",
       "      <th>test</th>\n",
       "      <th>bounding_box</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>42</td>\n",
       "      <td>Jimbo Jones</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>43</td>\n",
       "      <td>Bumblebee Man</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>44</td>\n",
       "      <td>Hans Moleman</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>45</td>\n",
       "      <td>Helen Lovejoy</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>46</td>\n",
       "      <td>Jasper Beardly</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Unnamed: 0            name  total  train  test  bounding_box\n",
       "42          42     Jimbo Jones      0      0     0             0\n",
       "43          43   Bumblebee Man      0      0     0             0\n",
       "44          44    Hans Moleman      0      0     0             0\n",
       "45          45   Helen Lovejoy      0      0     0             0\n",
       "46          46  Jasper Beardly      0      0     0             0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_images = data[data['total']==0]\n",
    "no_images\n",
    "# Fünf Personen ohne Bilder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b6ea748b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>name</th>\n",
       "      <th>total</th>\n",
       "      <th>train</th>\n",
       "      <th>test</th>\n",
       "      <th>bounding_box</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>35</td>\n",
       "      <td>Otto Mann</td>\n",
       "      <td>32</td>\n",
       "      <td>27</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>36</td>\n",
       "      <td>Fat Tony</td>\n",
       "      <td>27</td>\n",
       "      <td>23</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>37</td>\n",
       "      <td>Gil</td>\n",
       "      <td>27</td>\n",
       "      <td>23</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>38</td>\n",
       "      <td>Miss Hoover</td>\n",
       "      <td>17</td>\n",
       "      <td>14</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>39</td>\n",
       "      <td>Disco Stu</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>40</td>\n",
       "      <td>Troy Mcclure</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>41</td>\n",
       "      <td>Lionel Hutz</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>42</td>\n",
       "      <td>Jimbo Jones</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>43</td>\n",
       "      <td>Bumblebee Man</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>44</td>\n",
       "      <td>Hans Moleman</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>45</td>\n",
       "      <td>Helen Lovejoy</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>46</td>\n",
       "      <td>Jasper Beardly</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Unnamed: 0            name  total  train  test  bounding_box\n",
       "35          35       Otto Mann     32     27     5             0\n",
       "36          36        Fat Tony     27     23     4             0\n",
       "37          37             Gil     27     23     4             0\n",
       "38          38     Miss Hoover     17     14     3             0\n",
       "39          39       Disco Stu      8      7     1             0\n",
       "40          40    Troy Mcclure      8      7     1             0\n",
       "41          41     Lionel Hutz      3      3     0             0\n",
       "42          42     Jimbo Jones      0      0     0             0\n",
       "43          43   Bumblebee Man      0      0     0             0\n",
       "44          44    Hans Moleman      0      0     0             0\n",
       "45          45   Helen Lovejoy      0      0     0             0\n",
       "46          46  Jasper Beardly      0      0     0             0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "less_images = data[data['train']< 30]\n",
    "less_images\n",
    "# Sieben Personen/Chars mit wenigen Bilder (<30)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b62ffd32",
   "metadata": {},
   "source": [
    "Daten bestehen aus Bildern zu 47(42) verschiedenen Personen, zu 5 dieser Personen gibt es allerdings keine Daten.\n",
    "Hier wäre ein möglicher nächster Schritt Bilddaten zu sammeln und ebenfalls in Trainings-und Testdaten einzuteilen.\n",
    "Die Daten sind bereits in Trainings-und Testdaten aufgeteilt im Verhältnis 85%:15%."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "238d4f39",
   "metadata": {},
   "source": [
    "## II. Data Understanding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5333b989",
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d1dbc233",
   "metadata": {},
   "outputs": [],
   "source": [
    "# hier sollen die für das Modell wichtigen Daten gespeichert werden\n",
    "image_df = pd.DataFrame(columns = ['name', 'width', 'height', 'mode'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "69988dc1",
   "metadata": {},
   "outputs": [],
   "source": [
    "download_path = './data/download/train/'  #Pfad zum Ordner mit den Trainingsbildern"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7932632",
   "metadata": {},
   "source": [
    "Jedes Bild in jedem Ordner des Trainingsdatensatzes wird eingelesen und Name, Höhe & Breite \n",
    "und der Modus werden gespeichert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "951cb7c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "for folder_name in os.listdir(download_path):\n",
    "    folder_path = os.path.join(download_path, folder_name)\n",
    "    if os.path.isdir(folder_path):\n",
    "        for file in os.listdir(folder_path):\n",
    "            file_path = os.path.join(folder_path, file)\n",
    "            if os.path.isfile(file_path):\n",
    "                with Image.open(file_path) as img:\n",
    "                    width, height = img.size\n",
    "                    mode = img.mode\n",
    "                    new_row = pd.DataFrame({'name':[file_path], 'width':[width], 'height':[height], 'mode':[mode]})\n",
    "                    image_df = pd.concat([image_df, new_row], ignore_index = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bd0dd50b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>width</th>\n",
       "      <th>height</th>\n",
       "      <th>mode</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>./data/download/train/maggie_simpson/pic_0028.jpg</td>\n",
       "      <td>320</td>\n",
       "      <td>480</td>\n",
       "      <td>RGB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>./data/download/train/maggie_simpson/pic_0000.jpg</td>\n",
       "      <td>576</td>\n",
       "      <td>432</td>\n",
       "      <td>RGB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>./data/download/train/maggie_simpson/pic_0014.jpg</td>\n",
       "      <td>320</td>\n",
       "      <td>480</td>\n",
       "      <td>RGB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>./data/download/train/maggie_simpson/pic_0015.jpg</td>\n",
       "      <td>288</td>\n",
       "      <td>416</td>\n",
       "      <td>RGB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>./data/download/train/maggie_simpson/pic_0001.jpg</td>\n",
       "      <td>576</td>\n",
       "      <td>432</td>\n",
       "      <td>RGB</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                name width height mode\n",
       "0  ./data/download/train/maggie_simpson/pic_0028.jpg   320    480  RGB\n",
       "1  ./data/download/train/maggie_simpson/pic_0000.jpg   576    432  RGB\n",
       "2  ./data/download/train/maggie_simpson/pic_0014.jpg   320    480  RGB\n",
       "3  ./data/download/train/maggie_simpson/pic_0015.jpg   288    416  RGB\n",
       "4  ./data/download/train/maggie_simpson/pic_0001.jpg   576    432  RGB"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "17a4d8d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>width</th>\n",
       "      <th>height</th>\n",
       "      <th>mode</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>20902</td>\n",
       "      <td>20902</td>\n",
       "      <td>20902</td>\n",
       "      <td>20902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>20902</td>\n",
       "      <td>158</td>\n",
       "      <td>172</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>./data/download/train/maggie_simpson/pic_0028.jpg</td>\n",
       "      <td>288</td>\n",
       "      <td>480</td>\n",
       "      <td>RGB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>4721</td>\n",
       "      <td>5163</td>\n",
       "      <td>20902</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     name  width  height  \\\n",
       "count                                               20902  20902   20902   \n",
       "unique                                              20902    158     172   \n",
       "top     ./data/download/train/maggie_simpson/pic_0028.jpg    288     480   \n",
       "freq                                                    1   4721    5163   \n",
       "\n",
       "         mode  \n",
       "count   20902  \n",
       "unique      1  \n",
       "top       RGB  \n",
       "freq    20902  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image_df.describe()\n",
    "# --> jedes Bild hat 3 Dimensionen (RGB): Kein Schwarz-Weiß Bild und keine Transparancy Mask / Padding)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "449154a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "256\n",
      "956\n",
      "256\n",
      "594\n"
     ]
    }
   ],
   "source": [
    "print(image_df['width'].min())\n",
    "print(image_df['width'].max())\n",
    "print(image_df['height'].min())\n",
    "print(image_df['height'].max())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5799a670",
   "metadata": {},
   "source": [
    "Die Höhe der Bilder liegt zwischen 256 und 1072 Pixeln, die Breite zwischen 256 und 1912 Pixeln"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d1dc0d88",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "288    4721\n",
      "320    3513\n",
      "576    3197\n",
      "640    2537\n",
      "256    1948\n",
      "       ... \n",
      "393       1\n",
      "261       1\n",
      "349       1\n",
      "532       1\n",
      "289       1\n",
      "Name: width, Length: 158, dtype: int64\n",
      "480    5163\n",
      "432    4918\n",
      "416    2972\n",
      "352    2647\n",
      "256    1000\n",
      "       ... \n",
      "456       1\n",
      "336       1\n",
      "281       1\n",
      "462       1\n",
      "366       1\n",
      "Name: height, Length: 172, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(image_df['width'].value_counts())\n",
    "print(image_df['height'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84dfd18e",
   "metadata": {},
   "source": [
    "## III. Data Preparation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13e3c7c3",
   "metadata": {},
   "source": [
    "### III.a) Removing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5e6d8b8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "774c38da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>width</th>\n",
       "      <th>height</th>\n",
       "      <th>mode</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [name, width, height, mode]\n",
       "Index: []"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plt.hist(image_df['width'], bins = 10)\n",
    "plt.show()\n",
    "wide_images = image_df[image_df['width']> 1250]\n",
    "wide_images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "940d1f33",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Datei ./data/train_dataset/comic_book_guy/pic_0363.jpg wurde erfolgreich gelöscht\n",
      "Datei ./data/train_dataset/comic_book_guy/pic_0387.jpg wurde erfolgreich gelöscht\n"
     ]
    }
   ],
   "source": [
    "for name in wide_images['name']:\n",
    "    try:\n",
    "        os.remove(name)\n",
    "        print(f'Datei {name} wurde erfolgreich gelöscht')\n",
    "    except: \n",
    "        print(f'Fehler beim Löschen der Datei {name}')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "098d2b41",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>width</th>\n",
       "      <th>height</th>\n",
       "      <th>mode</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [name, width, height, mode]\n",
       "Index: []"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plt.hist(image_df['height'], bins = 10)\n",
    "plt.show()\n",
    "high_images = image_df[image_df['height']> 600]\n",
    "high_images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "78c0983e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fehler beim Löschen der Datei ./data/train_dataset/milhouse_van_houten/pic_0997.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/milhouse_van_houten/pic_0007.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/milhouse_van_houten/pic_0855.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/milhouse_van_houten/pic_0854.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/milhouse_van_houten/pic_0907.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/lenny_leonard/pic_0000.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/lenny_leonard/pic_0001.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/lenny_leonard/pic_0020.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/sideshow_bob/pic_0834.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/sideshow_bob/pic_0043.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/edna_krabappel/pic_0000.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/edna_krabappel/pic_0013.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/ned_flanders/pic_0019.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/apu_nahasapeemapetilon/pic_0000.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/apu_nahasapeemapetilon/pic_0010.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/apu_nahasapeemapetilon/pic_0051.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/comic_book_guy/pic_0388.jpg\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/comic_book_guy/pic_0363.jpg\n",
      "Datei ./data/train_dataset/comic_book_guy/pic_0328.jpg wurde erfolgreich gelöscht\n",
      "Datei ./data/train_dataset/comic_book_guy/pic_0266.jpg wurde erfolgreich gelöscht\n",
      "Datei ./data/train_dataset/comic_book_guy/pic_0256.jpg wurde erfolgreich gelöscht\n",
      "Datei ./data/train_dataset/comic_book_guy/pic_0332.jpg wurde erfolgreich gelöscht\n",
      "Datei ./data/train_dataset/comic_book_guy/pic_0324.jpg wurde erfolgreich gelöscht\n",
      "Datei ./data/train_dataset/comic_book_guy/pic_0354.jpg wurde erfolgreich gelöscht\n",
      "Datei ./data/train_dataset/comic_book_guy/pic_0433.jpg wurde erfolgreich gelöscht\n",
      "Datei ./data/train_dataset/comic_book_guy/pic_0355.jpg wurde erfolgreich gelöscht\n",
      "Fehler beim Löschen der Datei ./data/train_dataset/comic_book_guy/pic_0387.jpg\n",
      "Datei ./data/train_dataset/principal_skinner/pic_0006.jpg wurde erfolgreich gelöscht\n",
      "Datei ./data/train_dataset/principal_skinner/pic_0032.jpg wurde erfolgreich gelöscht\n",
      "Datei ./data/train_dataset/lisa_simpson/pic_1319.jpg wurde erfolgreich gelöscht\n",
      "Datei ./data/train_dataset/lisa_simpson/pic_1285.jpg wurde erfolgreich gelöscht\n"
     ]
    }
   ],
   "source": [
    "for name in high_images['name']:\n",
    "    try:\n",
    "        os.remove(name)\n",
    "        print(f'Datei {name} wurde erfolgreich gelöscht')\n",
    "    except: \n",
    "        print(f'Fehler beim Löschen der Datei {name}')\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16475cdc",
   "metadata": {},
   "source": [
    "#### Da wenige Images (ca. 25) deutlich größer als die anderen sind, werden diese im weiteren Verlauf entfernt.\n",
    "#### Ist eigentlich nicht zwingend notwendig, aber kann Verzerrungen im Trainingsprozess verhindern."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "4ebef1cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "subfolders = [f.path for f in os.scandir(download_path) if f.is_dir()]\n",
    "num_images = []\n",
    "for folder in subfolders:\n",
    "    num_images.append(len([f for f in os.listdir(folder) if f.endswith('.jpg')]))\n",
    "\n",
    "df_num_images = pd.DataFrame({\n",
    "                'class':[os.path.basename(folder) for folder in subfolders],\n",
    "                'images':num_images\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8ea7ec07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>class</th>\n",
       "      <th>images</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>maggie_simpson</td>\n",
       "      <td>128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>charles_montgomery_burns</td>\n",
       "      <td>1193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>patty_bouvier</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ralph_wiggum</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>chief_wiggum</td>\n",
       "      <td>986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>milhouse_van_houten</td>\n",
       "      <td>1074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>rainier_wolfcastle</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>cletus_spuckler</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>martin_prince</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>lenny_leonard</td>\n",
       "      <td>307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>sideshow_bob</td>\n",
       "      <td>875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>fat_tony</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>selma_bouvier</td>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>barney_gumble</td>\n",
       "      <td>106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>lionel_hutz</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>gil</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>moe_szyslak</td>\n",
       "      <td>1452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>carl_carlson</td>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>edna_krabappel</td>\n",
       "      <td>455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>snake_jailbird</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>groundskeeper_willie</td>\n",
       "      <td>121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>sideshow_mel</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>ned_flanders</td>\n",
       "      <td>1453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>abraham_grampa_simpson</td>\n",
       "      <td>913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>krusty_the_clown</td>\n",
       "      <td>1206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>waylon_smithers</td>\n",
       "      <td>181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>apu_nahasapeemapetilon</td>\n",
       "      <td>620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>marge_simpson</td>\n",
       "      <td>1291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>comic_book_guy</td>\n",
       "      <td>458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>nelson_muntz</td>\n",
       "      <td>358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>mayor_quimby</td>\n",
       "      <td>246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>kent_brockman</td>\n",
       "      <td>498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>professor_john_frink</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>principal_skinner</td>\n",
       "      <td>1192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>bart_simpson</td>\n",
       "      <td>1342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>lisa_simpson</td>\n",
       "      <td>1352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>otto_mann</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>troy_mcclure</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>miss_hoover</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>disco_stu</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>homer_simpson</td>\n",
       "      <td>2246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>agnes_skinner</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       class  images\n",
       "0             maggie_simpson     128\n",
       "1   charles_montgomery_burns    1193\n",
       "2              patty_bouvier      72\n",
       "3               ralph_wiggum      89\n",
       "4               chief_wiggum     986\n",
       "5        milhouse_van_houten    1074\n",
       "6         rainier_wolfcastle      45\n",
       "7            cletus_spuckler      47\n",
       "8              martin_prince      71\n",
       "9              lenny_leonard     307\n",
       "10              sideshow_bob     875\n",
       "11                  fat_tony      27\n",
       "12             selma_bouvier     103\n",
       "13             barney_gumble     106\n",
       "14               lionel_hutz       3\n",
       "15                       gil      27\n",
       "16               moe_szyslak    1452\n",
       "17              carl_carlson      98\n",
       "18            edna_krabappel     455\n",
       "19            snake_jailbird      55\n",
       "20      groundskeeper_willie     121\n",
       "21              sideshow_mel      40\n",
       "22              ned_flanders    1453\n",
       "23    abraham_grampa_simpson     913\n",
       "24          krusty_the_clown    1206\n",
       "25           waylon_smithers     181\n",
       "26    apu_nahasapeemapetilon     620\n",
       "27             marge_simpson    1291\n",
       "28            comic_book_guy     458\n",
       "29              nelson_muntz     358\n",
       "30              mayor_quimby     246\n",
       "31             kent_brockman     498\n",
       "32      professor_john_frink      65\n",
       "33         principal_skinner    1192\n",
       "34              bart_simpson    1342\n",
       "35              lisa_simpson    1352\n",
       "36                 otto_mann      32\n",
       "37              troy_mcclure       8\n",
       "38               miss_hoover      17\n",
       "39                 disco_stu       8\n",
       "40             homer_simpson    2246\n",
       "41             agnes_skinner      42"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_num_images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "97698e39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2500x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "plt.figure(figsize = (25, 10))\n",
    "ax = sns.barplot(x = df_num_images['class'], y = df_num_images['images'])\n",
    "ax.set_xticklabels(ax.get_xticklabels(), rotation=40, horizontalalignment='right')\n",
    "None"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d682cc4",
   "metadata": {},
   "source": [
    "#### Problem: Zu großer Unterschied zwischen einzelnen Klassen was Verfügbarkeit von Daten (Images) angeht"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "67a3a40c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>class</th>\n",
       "      <th>images</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>charles_montgomery_burns</td>\n",
       "      <td>1193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>milhouse_van_houten</td>\n",
       "      <td>1074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>moe_szyslak</td>\n",
       "      <td>1452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>ned_flanders</td>\n",
       "      <td>1453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>krusty_the_clown</td>\n",
       "      <td>1206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>marge_simpson</td>\n",
       "      <td>1291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>principal_skinner</td>\n",
       "      <td>1192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>bart_simpson</td>\n",
       "      <td>1342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>lisa_simpson</td>\n",
       "      <td>1352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>homer_simpson</td>\n",
       "      <td>2246</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       class  images\n",
       "1   charles_montgomery_burns    1193\n",
       "5        milhouse_van_houten    1074\n",
       "16               moe_szyslak    1452\n",
       "22              ned_flanders    1453\n",
       "24          krusty_the_clown    1206\n",
       "27             marge_simpson    1291\n",
       "33         principal_skinner    1192\n",
       "34              bart_simpson    1342\n",
       "35              lisa_simpson    1352\n",
       "40             homer_simpson    2246"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_num_images[df_num_images['images'] > 1000]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c20d191d",
   "metadata": {},
   "source": [
    "#### -> mögliche Lösungen:\n",
    "#### 1. Mehr Daten generieren ( in dem Fall eher schwierig, dauert zu lange) deshalb:\n",
    "#### 2. Nur die Klassen (chars) behalten welche ein Sample Size > 1000 haben (danach noch 10 Klassen)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "0120022b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import shutil\n",
    "for folder in subfolders:\n",
    "    num_images = len([f for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))])\n",
    "    if num_images > 1000:\n",
    "        folder_name = os.path.basename(folder)\n",
    "        destination_path = os.path.join('./data/train_dataset', folder_name)\n",
    "        shutil.copytree(folder, destination_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df1cdfe0",
   "metadata": {},
   "source": [
    "#### Es wurden alle Trainingsdaten, die genutzt werden sollen (10 Klassen) in einen einen neuen Ordner kopiert - \"train_data\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85984794",
   "metadata": {},
   "source": [
    "### III.b) preparing data for model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "3aab9a07",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from torchvision import datasets, transforms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "ff91caed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([3, 480, 320])"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_image = Image.open('./data/train_dataset/bart_simpson/pic_0000.jpg')\n",
    "transformtest = transforms.ToTensor()\n",
    "tensor_image = transformtest(test_image)\n",
    "tensor_image.shape\n",
    "# Zum Test, ob bei der Umwandlung zum Tensor alles klappt\n",
    "# (Bild hatt 480 x 320 Pixel und 3 Channels (RGB))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "abc699f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "transform = transforms.Compose([transforms.Resize((64, 64)), transforms.ToTensor(),\n",
    "                               transforms.Normalize(mean=(0.5, 0.5, 0.5), std = (0.5, 0.5, 0.5))])\n",
    "\n",
    "dataset = datasets.ImageFolder(root = './data/train_dataset', transform = transform)\n",
    "\n",
    "rest_data, test_data = train_test_split(dataset, test_size = 0.2, random_state = 97)\n",
    "train_data, val_data = train_test_split(rest_data, test_size = 0.1, random_state = 97)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "9b5485d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['bart_simpson', 'charles_montgomery_burns', 'homer_simpson', 'krusty_the_clown', 'lisa_simpson', 'marge_simpson', 'milhouse_van_houten', 'moe_szyslak', 'ned_flanders', 'principal_skinner']\n"
     ]
    }
   ],
   "source": [
    "classes  = dataset.classes\n",
    "print(classes)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30fe240c",
   "metadata": {},
   "source": [
    "#### Zuerst wird jedes Bild auf \"geresized, normalisert und in einen Tensor umgewandelt\n",
    "####  Dann werden die Bilder in Trainigs-, Test- und Validerungsdaten geteilt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae352767",
   "metadata": {},
   "source": [
    "## IV. Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "55accf66",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19b02b85",
   "metadata": {},
   "source": [
    "### IV.a) Hyper Params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "245194dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hyperparameter\n",
    "IN_CHANNELS = 3\n",
    "BATCH_SIZE = 4\n",
    "NUM_EPOCHS = 4\n",
    "NUM_CLASSES = len(classes)\n",
    "LEARNING_RATE = 0.001\n",
    "N_TOTAL_STEPS = len(train_loader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "e9ee96a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "train_loader = torch.utils.data.DataLoader(train_data, batch_size=BATCH_SIZE, shuffle=True, num_workers=2)\n",
    "val_loader = torch.utils.data.DataLoader(val_data, batch_size=BATCH_SIZE, shuffle=False, num_workers=2)\n",
    "test_loader = torch.utils.data.DataLoader(test_data, batch_size=BATCH_SIZE, shuffle=False, num_workers=2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "638173f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_classes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "696c22db",
   "metadata": {},
   "source": [
    "### IV.b) Creating model(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "5df9e222",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Conv1_CNN(nn.Module):\n",
    "    def __init__(self, input_channels, num_classes):\n",
    "        super(Conv1_CNN, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(in_channels = input_channels, out_channels = 16, kernel_size = 3, stride = 1, padding = 0)\n",
    "        self.pool = nn.MaxPool2d(kernel_size = 2, stride =  2)\n",
    "        self.fc1 = nn.Linear(16 * 31 * 31, 120)\n",
    "        self.fc2 = nn.Linear(120, num_classes)\n",
    "\n",
    "    def forward(self, x):\n",
    "        out = F.relu(self.conv1(x))\n",
    "        out = self.pool(out)\n",
    "        out = out.reshape(out.shape[0], -1)\n",
    "        out = F.relu(self.fc1(out))\n",
    "        out = self.fc2(out)\n",
    "        return out\n",
    "\n",
    "conv1_cnn = Conv1_CNN(input_channels = 3, num_classes = num_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "e9ca9407",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define Loss-function + optimzer\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = optim.SGD(net.parameters(), lr=LEARNING_RATE)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bf9b612",
   "metadata": {},
   "source": [
    "### IV.c) Training Loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "1aa6ff48",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "1e87313a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 1/4, step: 100/2484, loss = 2.3303\n",
      "Epoch: 1/4, step: 200/2484, loss = 2.2722\n",
      "Epoch: 1/4, step: 300/2484, loss = 2.2683\n",
      "Epoch: 1/4, step: 400/2484, loss = 2.3084\n",
      "Epoch: 1/4, step: 500/2484, loss = 2.2921\n",
      "Epoch: 1/4, step: 600/2484, loss = 2.3538\n",
      "Epoch: 1/4, step: 700/2484, loss = 2.2950\n",
      "Epoch: 1/4, step: 800/2484, loss = 2.3259\n",
      "Epoch: 1/4, step: 900/2484, loss = 2.3131\n",
      "Epoch: 1/4, step: 1000/2484, loss = 2.3020\n",
      "Epoch: 1/4, step: 1100/2484, loss = 2.3434\n",
      "Epoch: 1/4, step: 1200/2484, loss = 2.2943\n",
      "Epoch: 1/4, step: 1300/2484, loss = 2.3352\n",
      "Epoch: 1/4, step: 1400/2484, loss = 2.2332\n",
      "Epoch: 1/4, step: 1500/2484, loss = 2.2923\n",
      "Epoch: 1/4, step: 1600/2484, loss = 2.3252\n",
      "Epoch: 1/4, step: 1700/2484, loss = 2.3670\n",
      "Epoch: 1/4, step: 1800/2484, loss = 2.3085\n",
      "Epoch: 1/4, step: 1900/2484, loss = 2.3084\n",
      "Epoch: 1/4, step: 2000/2484, loss = 2.3906\n",
      "Epoch: 1/4, step: 2100/2484, loss = 2.2290\n",
      "Epoch: 1/4, step: 2200/2484, loss = 2.2733\n",
      "Epoch: 1/4, step: 2300/2484, loss = 2.3542\n",
      "Epoch: 1/4, step: 2400/2484, loss = 2.3359\n",
      "Epoch: 2/4, step: 100/2484, loss = 2.3065\n",
      "Epoch: 2/4, step: 200/2484, loss = 2.3721\n",
      "Epoch: 2/4, step: 300/2484, loss = 2.3172\n",
      "Epoch: 2/4, step: 400/2484, loss = 2.2963\n",
      "Epoch: 2/4, step: 500/2484, loss = 2.3476\n",
      "Epoch: 2/4, step: 600/2484, loss = 2.3479\n",
      "Epoch: 2/4, step: 700/2484, loss = 2.3645\n",
      "Epoch: 2/4, step: 800/2484, loss = 2.2707\n",
      "Epoch: 2/4, step: 900/2484, loss = 2.3076\n",
      "Epoch: 2/4, step: 1000/2484, loss = 2.2431\n",
      "Epoch: 2/4, step: 1100/2484, loss = 2.3209\n",
      "Epoch: 2/4, step: 1200/2484, loss = 2.3290\n",
      "Epoch: 2/4, step: 1300/2484, loss = 2.2971\n",
      "Epoch: 2/4, step: 1400/2484, loss = 2.3126\n",
      "Epoch: 2/4, step: 1500/2484, loss = 2.3063\n",
      "Epoch: 2/4, step: 1600/2484, loss = 2.2869\n",
      "Epoch: 2/4, step: 1700/2484, loss = 2.3258\n",
      "Epoch: 2/4, step: 1800/2484, loss = 2.2848\n",
      "Epoch: 2/4, step: 1900/2484, loss = 2.2678\n",
      "Epoch: 2/4, step: 2000/2484, loss = 2.3065\n",
      "Epoch: 2/4, step: 2100/2484, loss = 2.2964\n",
      "Epoch: 2/4, step: 2200/2484, loss = 2.2804\n",
      "Epoch: 2/4, step: 2300/2484, loss = 2.2832\n",
      "Epoch: 2/4, step: 2400/2484, loss = 2.2914\n",
      "Epoch: 3/4, step: 100/2484, loss = 2.2674\n",
      "Epoch: 3/4, step: 200/2484, loss = 2.2888\n",
      "Epoch: 3/4, step: 300/2484, loss = 2.3161\n",
      "Epoch: 3/4, step: 400/2484, loss = 2.3160\n",
      "Epoch: 3/4, step: 500/2484, loss = 2.3142\n",
      "Epoch: 3/4, step: 600/2484, loss = 2.3314\n",
      "Epoch: 3/4, step: 700/2484, loss = 2.2705\n",
      "Epoch: 3/4, step: 800/2484, loss = 2.3384\n",
      "Epoch: 3/4, step: 900/2484, loss = 2.3199\n",
      "Epoch: 3/4, step: 1000/2484, loss = 2.2651\n",
      "Epoch: 3/4, step: 1100/2484, loss = 2.2265\n",
      "Epoch: 3/4, step: 1200/2484, loss = 2.2933\n",
      "Epoch: 3/4, step: 1300/2484, loss = 2.2717\n",
      "Epoch: 3/4, step: 1400/2484, loss = 2.2782\n",
      "Epoch: 3/4, step: 1500/2484, loss = 2.3603\n",
      "Epoch: 3/4, step: 1600/2484, loss = 2.3348\n",
      "Epoch: 3/4, step: 1700/2484, loss = 2.2847\n",
      "Epoch: 3/4, step: 1800/2484, loss = 2.2107\n",
      "Epoch: 3/4, step: 1900/2484, loss = 2.2991\n",
      "Epoch: 3/4, step: 2000/2484, loss = 2.3236\n",
      "Epoch: 3/4, step: 2100/2484, loss = 2.3805\n",
      "Epoch: 3/4, step: 2200/2484, loss = 2.2470\n",
      "Epoch: 3/4, step: 2300/2484, loss = 2.3662\n",
      "Epoch: 3/4, step: 2400/2484, loss = 2.3434\n",
      "Epoch: 4/4, step: 100/2484, loss = 2.3368\n",
      "Epoch: 4/4, step: 200/2484, loss = 2.2936\n",
      "Epoch: 4/4, step: 300/2484, loss = 2.2510\n",
      "Epoch: 4/4, step: 400/2484, loss = 2.3150\n",
      "Epoch: 4/4, step: 500/2484, loss = 2.3616\n",
      "Epoch: 4/4, step: 600/2484, loss = 2.3219\n",
      "Epoch: 4/4, step: 700/2484, loss = 2.2577\n",
      "Epoch: 4/4, step: 800/2484, loss = 2.3725\n",
      "Epoch: 4/4, step: 900/2484, loss = 2.2707\n",
      "Epoch: 4/4, step: 1000/2484, loss = 2.3205\n",
      "Epoch: 4/4, step: 1100/2484, loss = 2.3435\n",
      "Epoch: 4/4, step: 1200/2484, loss = 2.2385\n",
      "Epoch: 4/4, step: 1300/2484, loss = 2.3011\n",
      "Epoch: 4/4, step: 1400/2484, loss = 2.3137\n",
      "Epoch: 4/4, step: 1500/2484, loss = 2.3012\n",
      "Epoch: 4/4, step: 1600/2484, loss = 2.3414\n",
      "Epoch: 4/4, step: 1700/2484, loss = 2.3777\n",
      "Epoch: 4/4, step: 1800/2484, loss = 2.3139\n",
      "Epoch: 4/4, step: 1900/2484, loss = 2.2931\n",
      "Epoch: 4/4, step: 2000/2484, loss = 2.2622\n",
      "Epoch: 4/4, step: 2100/2484, loss = 2.2988\n",
      "Epoch: 4/4, step: 2200/2484, loss = 2.3654\n",
      "Epoch: 4/4, step: 2300/2484, loss = 2.2918\n",
      "Epoch: 4/4, step: 2400/2484, loss = 2.3012\n",
      "Training abgeschlossen in 112.14 Sekunden\n"
     ]
    }
   ],
   "source": [
    "start_time = time.time()\n",
    "\n",
    "for epoch in range(NUM_EPOCHS):\n",
    "    for batch_id, (images, labels) in enumerate(train_loader):\n",
    "                                              \n",
    "                                                \n",
    "        outputs = conv1_cnn(images)\n",
    "        loss = criterion (outputs, labels)\n",
    "        \n",
    "        optimzer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "    \n",
    "    \n",
    "        if (batch_id+1) % 100 == 0:\n",
    "            print(f'Epoch: {epoch+1}/{NUM_EPOCHS}, step: {batch_id+1}/{N_TOTAL_STEPS}, loss = {loss.item():.4f}')\n",
    "\n",
    "            \n",
    "\n",
    "end_time = time.time()\n",
    "total_time = end_time-start_time\n",
    "print(f'Training abgeschlossen in {total_time:.2f} Sekunden')\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92959ea7",
   "metadata": {},
   "source": [
    "### IV c) Evaluating Model(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "a6466d98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of the network: 0.0 %\n"
     ]
    },
    {
     "ename": "ZeroDivisionError",
     "evalue": "division by zero",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/f_/h4870ndd4q3b0bssqc3g47180000gn/T/ipykernel_33246/271461744.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_classes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 31\u001b[0;31m             \u001b[0macc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m100\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mnum_class_correct\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mnum_class_samples\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     32\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Accuracy of {classes[i]}: {acc} %'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mZeroDivisionError\u001b[0m: division by zero"
     ]
    }
   ],
   "source": [
    "net.eval()\n",
    "\n",
    "num_samples = 0\n",
    "num_correct = 0\n",
    "\n",
    "num_class_samples = [0 for i in range (num_classes)]\n",
    "num_class_correct = [0 for i in range (num_classes)]\n",
    "\n",
    "\n",
    "\n",
    "with torch.no_grad():\n",
    "    for images, labels in val_loader:\n",
    "        outputs = conv1_cnn(images)\n",
    "        _, predicted = torch.max(outputs, 1) #max returns (value, index)\n",
    "        num_samples += labels.size(0)\n",
    "        num_correct += (predicted == labels).sum().item()\n",
    "        \n",
    "        for i in range(BATCH_SIZE):\n",
    "            \n",
    "            label = labels[i]\n",
    "            pred = predicted[i]\n",
    "            \n",
    "            if (label == pred):\n",
    "                num_class_correct += 1\n",
    "            num_class_samples[label] += 1\n",
    "        \n",
    "        acc = 100.0 * num_correct/num_samples\n",
    "        print(f'Accuracy of the network: {acc} %')\n",
    "\n",
    "        for i in range(num_classes):\n",
    "            acc = 100 * num_class_correct[i]/num_class_samples[i]\n",
    "            print(f'Accuracy of {classes[i]}: {acc} %')\n",
    "        \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c42d45ba",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7e31523",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c386720a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6067f5c3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "801eff72",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a3cd091",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab4e8164",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4796f87b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec550b0e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4aadad6c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efcb1482",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "b4a7bcc3",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "invalid index of a 0-dim tensor. Use `tensor.item()` in Python or `tensor.item<T>()` in C++ to convert a 0-dim tensor to a number",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/f_/h4870ndd4q3b0bssqc3g47180000gn/T/ipykernel_33246/4218495662.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     19\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBATCH_SIZE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m             \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m             \u001b[0mclass_correct\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m             \u001b[0mclass_total\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: invalid index of a 0-dim tensor. Use `tensor.item()` in Python or `tensor.item<T>()` in C++ to convert a 0-dim tensor to a number"
     ]
    }
   ],
   "source": [
    "net.eval()\n",
    "\n",
    "\n",
    "class_correct = list(0. for i in range(len(classes)))\n",
    "class_total = list(0. for i in range(len(classes)))\n",
    "val_loss = 0.0\n",
    "correct = 0    \n",
    "total = 0\n",
    "\n",
    "\n",
    "with torch.no_grad():\n",
    "    for data in test_loader:\n",
    "        images, labels = data\n",
    "        outputs = net(images)\n",
    "        _, predicted = torch.max(outputs, 1)\n",
    "        c = (predicted == labels).squeeze()\n",
    "        total += labels.size(0)\n",
    "        correct += (predicted == labels).sum().item()\n",
    "        for i in range(BATCH_SIZE):  \n",
    "            label = labels[i]\n",
    "            class_correct[label] += c[i].item()\n",
    "            class_total[label] += 1\n",
    "\n",
    "print(f'Gesamte Genauigkeit des Netzes auf den Testbildern: {100 * correct / total}%')\n",
    "\n",
    "for i in range(len(classes)):\n",
    "    print(f'Genauigkeit der Klasse {classes[i]}: {100 * class_correct[i] / class_total[i]}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee41d239",
   "metadata": {},
   "outputs": [],
   "source": [
    "with torch.no_grad():  # Deaktivieren des Gradienten-Tracking, um Speicher zu sparen\n",
    "    for images, labels in train_loader:\n",
    "        outputs = model(images)\n",
    "        _, predicted = torch.max(outputs, 1) #torch.max returns (value, index)\n",
    "        \n",
    "        num_correct += (predicted == labels).sum().item()\n",
    "        num_samples += labels.size(0)\n",
    "        \n",
    "        for i in range(labels.size(0)):\n",
    "            label = labels[i].item()\n",
    "            pred = predicted[i].item()\n",
    "            if (label == pred):\n",
    "                n_class_correct[label] += 1\n",
    "            n_class_samples[label] += 1\n",
    "            \n",
    "    accuracy = num_correct / num_samples\n",
    "    print(f'Accuracy auf dem Trainingsdatensatz: {100 * accuracy:.2f}%')\n",
    "    \n",
    "    for i in range(num_classes):\n",
    "        acc = 100.0 * n_class_correct[i] / n_class_samples[i]\n",
    "        print(f'Accuracy of {classes[i]}: {acc} %')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "8483049d",
   "metadata": {},
   "outputs": [],
   "source": [
    "transform = transforms.Compose([transforms.Resize((64, 64)), transforms.ToTensor(),\n",
    "                               transforms.Normalize(mean=(0.5, 0.5, 0.5), std = (0.5, 0.5, 0.5))])\n",
    "train_data = datasets.ImageFolder(root = './data/train_dataset', transform = transform)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "c032d313",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['bart_simpson',\n",
       " 'charles_montgomery_burns',\n",
       " 'homer_simpson',\n",
       " 'krusty_the_clown',\n",
       " 'lisa_simpson',\n",
       " 'marge_simpson',\n",
       " 'milhouse_van_houten',\n",
       " 'moe_szyslak',\n",
       " 'ned_flanders',\n",
       " 'principal_skinner']"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classes = train_data.classes\n",
    "classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "b54ac151",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "from torchvision import datasets, transforms\n",
    "from sklearn.model_selection import train_test_split\n",
    "import torch.nn.functional as F"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "705b4e33",
   "metadata": {},
   "source": [
    "### III.c) Hyper params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "ada6f494",
   "metadata": {},
   "outputs": [],
   "source": [
    "in_channels = 3\n",
    "num_classes = len(classes)\n",
    "learning_rate = 0.001\n",
    "batch_size = 4\n",
    "num_epochs = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "37470093",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_loader = DataLoader(train_data, batch_size = batch_size, shuffle = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4286bfbe",
   "metadata": {},
   "source": [
    "Die Trainingsbilder wurden alle auf die selbe Größe reduziert (128x128 Pixel) und in Tensoren umgwandelt (Tensoren\n",
    "mit der Shape (128x128x3).\n",
    "Mit der Dataset-Klasse aus torchvision, werden die Klassen (Namen der Ordner) automatisch erkannt, keine manuelle Anpassung notwendig.\n",
    "Der DataLoader vereinfacht die Daten effizient zu laden und in Batches einzuteilen (hier 64).\n",
    "Nach jeder Trainingsepoche werden Daten neu \"geshuffelt\", um overfitting zu vermeiden."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a463abde",
   "metadata": {},
   "source": [
    "## IV. Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3a17670",
   "metadata": {},
   "source": [
    "### IV. a) Creating Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "f6eaa60e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch.optim as optim\n",
    "import torch.nn.functional as F"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dc199ab",
   "metadata": {},
   "source": [
    "#### Formel für Veränderung des Bildes:\n",
    "O = Ausgabe, W = Eingabe, F = Filter(Kernel), P = Padding, S = Stride\n",
    "O = (W-F+2P)/S + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "243a1aa3",
   "metadata": {},
   "outputs": [],
   "source": [
    "class CNN(nn.Module):\n",
    "    def __init__(self,input_size, num_classes):\n",
    "        super(CNN, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(in_channels = input_size, out_channels = 10, kernel_size = 3, stride = 1, padding = 1)\n",
    "        self.pool = nn.MaxPool2d(kernel_size = 2, stride = 2, padding = 0)\n",
    "        self.conv2 = nn.Conv2d(in_channels = 10, out_channels = 16, kernel_size = 3, stride = 1, padding = 1)\n",
    "     \n",
    "        \n",
    "        self.lin1 = nn.Linear(in_features = 16*16*16, out_features = 4096)\n",
    "        self.lin2 = nn.Linear(in_features = 4096, out_features = 1000)\n",
    "        self.lin3 = nn.Linear(in_features = 1000, out_features = 100)\n",
    "        self.lin4 = nn.Linear(in_features = 100, out_features = num_classes)\n",
    "        \n",
    "        \n",
    "    def forward(self, x):\n",
    "        out = F.relu(self.conv1(x))\n",
    "        out = self.pool(out)\n",
    "        out = F.relu(self.conv2(out))\n",
    "        out = self.pool(out)\n",
    "        out = out.reshape(out.shape[0], -1) #reshapen für die Lineare Schicht (Shape davor: batch_size*16*32*32)\n",
    "        out = F.relu(self.lin1(out))\n",
    "        out = F.relu(self.lin2(out))\n",
    "        out = F.relu(self.lin3(out))\n",
    "        out = self.lin4(out)\n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "10db8a62",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = CNN(input_size = 3, num_classes = num_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "1b4d4913",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Nur ZUM TEST!\n",
    "\n",
    "class CNNtest(nn.Module):\n",
    "    def __init__(self, input_size, num_classes):\n",
    "        super(CNNtest, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(in_channels=input_size, out_channels=32, kernel_size=3,stride = 1, padding=1)\n",
    "        self.conv2 = nn.Conv2d(in_channels=32, out_channels=32, kernel_size=3, stride = 1, padding=1)\n",
    "        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)\n",
    "        self.dropout1 = nn.Dropout(0.25)\n",
    "        self.conv3 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3,stride = 1, padding=1)\n",
    "        self.conv4 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, stride = 1, padding=1)\n",
    "        self.dropout2 = nn.Dropout(0.25)\n",
    "        self.fc1 = nn.Linear(64 * 16 * 16, 512)\n",
    "        self.dropout3 = nn.Dropout(0.5)\n",
    "        self.fc2 = nn.Linear(512, num_classes)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x = F.relu(self.conv1(x))\n",
    "        x = F.relu(self.conv2(x))\n",
    "        x = self.pool(x)\n",
    "        x = self.dropout1(x)\n",
    "        x = F.relu(self.conv3(x))\n",
    "        x = F.relu(self.conv4(x))\n",
    "        x = self.pool(x)\n",
    "        x = self.dropout2(x)\n",
    "        x = x.reshape(x.shape[0], -1)  # Flatten\n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = self.dropout3(x)\n",
    "        x = self.fc2(x)\n",
    "        return x\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "05e98a2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_model = CNNtest(input_size = 3, num_classes = 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "d362a7ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = optim.SGD(model.parameters(), lr=learning_rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "4c79bfac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epooch: 1/1, step: 100/3451, loss = 2.2829\n",
      "Epooch: 1/1, step: 200/3451, loss = 2.3078\n",
      "Epooch: 1/1, step: 300/3451, loss = 2.3127\n",
      "Epooch: 1/1, step: 400/3451, loss = 2.3085\n",
      "Epooch: 1/1, step: 500/3451, loss = 2.3022\n",
      "Epooch: 1/1, step: 600/3451, loss = 2.3139\n",
      "Epooch: 1/1, step: 700/3451, loss = 2.3036\n",
      "Epooch: 1/1, step: 800/3451, loss = 2.3134\n",
      "Epooch: 1/1, step: 900/3451, loss = 2.2998\n",
      "Epooch: 1/1, step: 1000/3451, loss = 2.3113\n",
      "Epooch: 1/1, step: 1100/3451, loss = 2.3072\n",
      "Epooch: 1/1, step: 1200/3451, loss = 2.3077\n",
      "Epooch: 1/1, step: 1300/3451, loss = 2.3035\n",
      "Epooch: 1/1, step: 1400/3451, loss = 2.2939\n",
      "Epooch: 1/1, step: 1500/3451, loss = 2.2936\n",
      "Epooch: 1/1, step: 1600/3451, loss = 2.2955\n",
      "Epooch: 1/1, step: 1700/3451, loss = 2.2947\n",
      "Epooch: 1/1, step: 1800/3451, loss = 2.3027\n",
      "Epooch: 1/1, step: 1900/3451, loss = 2.3174\n",
      "Epooch: 1/1, step: 2000/3451, loss = 2.2911\n",
      "Epooch: 1/1, step: 2100/3451, loss = 2.3021\n",
      "Epooch: 1/1, step: 2200/3451, loss = 2.3080\n",
      "Epooch: 1/1, step: 2300/3451, loss = 2.2957\n",
      "Epooch: 1/1, step: 2400/3451, loss = 2.2768\n",
      "Epooch: 1/1, step: 2500/3451, loss = 2.2933\n",
      "Epooch: 1/1, step: 2600/3451, loss = 2.3008\n",
      "Epooch: 1/1, step: 2700/3451, loss = 2.2967\n",
      "Epooch: 1/1, step: 2800/3451, loss = 2.3158\n",
      "Epooch: 1/1, step: 2900/3451, loss = 2.3180\n",
      "Epooch: 1/1, step: 3000/3451, loss = 2.2828\n",
      "Epooch: 1/1, step: 3100/3451, loss = 2.2979\n",
      "Epooch: 1/1, step: 3200/3451, loss = 2.2965\n",
      "Epooch: 1/1, step: 3300/3451, loss = 2.2991\n",
      "Epooch: 1/1, step: 3400/3451, loss = 2.2912\n",
      "Training abgeschlossen in 380.57 Sekunden\n"
     ]
    }
   ],
   "source": [
    "start_time = time.time()\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    for batch_id, (data, labels) in enumerate(train_loader):\n",
    "        scores = test_model(data)\n",
    "        loss = criterion(scores, labels)\n",
    "        \n",
    "        \n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        \n",
    "        if (batch_id+1) % 100 == 0:\n",
    "            print(f'Epooch: {epoch+1}/{num_epochs}, step: {batch_id+1}/{n_total_steps}, loss = {loss.item():.4f}')\n",
    "\n",
    "            \n",
    "            \n",
    "end_time = time.time()\n",
    "total_time = end_time-start_time\n",
    "print(f'Training abgeschlossen in {total_time:.2f} Sekunden')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "d744051b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n",
      "tensor([2, 2, 2, 2])\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/f_/h4870ndd4q3b0bssqc3g47180000gn/T/ipykernel_71431/1455098503.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mno_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Deaktivieren des Gradienten-Tracking, um Speicher zu sparen\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrain_loader\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m         \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m         \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredicted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#torch.max returns (value, index)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    631\u001b[0m                 \u001b[0;31m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    632\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 633\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    634\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_yielded\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    635\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_kind\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_DatasetKind\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIterable\u001b[0m \u001b[0;32mand\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    675\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    676\u001b[0m         \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 677\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_fetcher\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    678\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    679\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory_device\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36mfetch\u001b[0;34m(self, possibly_batched_index)\u001b[0m\n\u001b[1;32m     49\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitems__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     49\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitems__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, index)\u001b[0m\n\u001b[1;32m    227\u001b[0m         \"\"\"\n\u001b[1;32m    228\u001b[0m         \u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msamples\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 229\u001b[0;31m         \u001b[0msample\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    230\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    231\u001b[0m             \u001b[0msample\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36mdefault_loader\u001b[0;34m(path)\u001b[0m\n\u001b[1;32m    266\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0maccimage_loader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    267\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 268\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mpil_loader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    269\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    270\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36mpil_loader\u001b[0;34m(path)\u001b[0m\n\u001b[1;32m    246\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    247\u001b[0m         \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 248\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mimg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconvert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"RGB\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    249\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/PIL/Image.py\u001b[0m in \u001b[0;36mconvert\u001b[0;34m(self, mode, matrix, dither, palette, colors)\u001b[0m\n\u001b[1;32m    899\u001b[0m         \"\"\"\n\u001b[1;32m    900\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 901\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    902\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    903\u001b[0m         \u001b[0mhas_transparency\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"transparency\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/PIL/ImageFile.py\u001b[0m in \u001b[0;36mload\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    255\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    256\u001b[0m                             \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 257\u001b[0;31m                             \u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merr_code\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdecoder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    258\u001b[0m                             \u001b[0;32mif\u001b[0m \u001b[0mn\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    259\u001b[0m                                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "test_model.eval()\n",
    "\n",
    "num_samples = 0\n",
    "num_correct = 0\n",
    "\n",
    "n_class_samples = [0 for i in range (num_classes)]\n",
    "n_class_correct = [0 for i in range (num_classes)]\n",
    "\n",
    "with torch.no_grad():  # Deaktivieren des Gradienten-Tracking, um Speicher zu sparen\n",
    "    \n",
    "    for images, labels in train_loader:\n",
    "        outputs = test_model(images)\n",
    "        _, predicted = torch.max(outputs, 1) #torch.max returns (value, index)\n",
    "           \n",
    "        \n",
    "        num_correct += (predicted == labels).sum().item()\n",
    "        num_samples += labels.size(0)\n",
    "        \n",
    "        for i in range(labels.size(0)):\n",
    "            label = labels[i].item()\n",
    "            pred = predicted[i].item()\n",
    "            if (label == pred):\n",
    "                n_class_correct[label] += 1\n",
    "            n_class_samples[label] += 1\n",
    "            \n",
    "    accuracy = num_correct / num_samples\n",
    "    print(f'Accuracy auf dem Trainingsdatensatz: {100 * accuracy:.2f}%')\n",
    "    \n",
    "    for i in range(num_classes):\n",
    "        acc = 100.0 * n_class_correct[i] / n_class_samples[i]\n",
    "        print(f'Accuracy of {classes[i]}: {acc} %')\n",
    "\n",
    "        \n",
    "test_model.train()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c06549e",
   "metadata": {},
   "source": [
    "### IV. b) Training model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "287e6b75",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_total_steps = len(train_loader) #anzahl der Batches\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "7cd9a92b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epooch: 1/4, step: 100/3451, loss = 2.4549\n",
      "Epooch: 1/4, step: 200/3451, loss = 2.6113\n",
      "Epooch: 1/4, step: 300/3451, loss = 2.5090\n",
      "Epooch: 1/4, step: 400/3451, loss = 4.0340\n",
      "Epooch: 1/4, step: 500/3451, loss = 1.5303\n",
      "Epooch: 1/4, step: 600/3451, loss = 4.0086\n",
      "Epooch: 1/4, step: 700/3451, loss = 4.2267\n",
      "Epooch: 1/4, step: 800/3451, loss = 6.2323\n",
      "Epooch: 1/4, step: 900/3451, loss = 1.9923\n",
      "Epooch: 1/4, step: 1000/3451, loss = 6.7394\n",
      "Epooch: 1/4, step: 1100/3451, loss = 8.2106\n",
      "Epooch: 1/4, step: 1200/3451, loss = 8.6581\n",
      "Epooch: 1/4, step: 1300/3451, loss = 10.5658\n",
      "Epooch: 1/4, step: 1400/3451, loss = 13.4594\n",
      "Epooch: 1/4, step: 1500/3451, loss = 15.1393\n",
      "Epooch: 1/4, step: 1600/3451, loss = 7.0258\n",
      "Epooch: 1/4, step: 1700/3451, loss = 29.9726\n",
      "Epooch: 1/4, step: 1800/3451, loss = 20.0793\n",
      "Epooch: 1/4, step: 1900/3451, loss = 26.3578\n",
      "Epooch: 1/4, step: 2000/3451, loss = 47.5884\n",
      "Epooch: 1/4, step: 2100/3451, loss = 18.6100\n",
      "Epooch: 1/4, step: 2200/3451, loss = 15.6809\n",
      "Epooch: 1/4, step: 2300/3451, loss = 27.9919\n",
      "Epooch: 1/4, step: 2400/3451, loss = 10.0804\n",
      "Epooch: 1/4, step: 2500/3451, loss = 63.9587\n",
      "Epooch: 1/4, step: 2600/3451, loss = 61.4688\n",
      "Epooch: 1/4, step: 2700/3451, loss = 134.5046\n",
      "Epooch: 1/4, step: 2800/3451, loss = 57.8642\n",
      "Epooch: 1/4, step: 2900/3451, loss = 65.4721\n",
      "Epooch: 1/4, step: 3000/3451, loss = 62.2693\n",
      "Epooch: 1/4, step: 3100/3451, loss = 54.8962\n",
      "Epooch: 1/4, step: 3200/3451, loss = 106.5888\n",
      "Epooch: 1/4, step: 3300/3451, loss = 138.5440\n",
      "Epooch: 1/4, step: 3400/3451, loss = 98.4769\n",
      "Epooch: 2/4, step: 100/3451, loss = 106.6264\n",
      "Epooch: 2/4, step: 200/3451, loss = 152.0256\n",
      "Epooch: 2/4, step: 300/3451, loss = 86.0631\n",
      "Epooch: 2/4, step: 400/3451, loss = 84.7434\n",
      "Epooch: 2/4, step: 500/3451, loss = 118.9045\n",
      "Epooch: 2/4, step: 600/3451, loss = 306.9645\n",
      "Epooch: 2/4, step: 700/3451, loss = 40.6111\n",
      "Epooch: 2/4, step: 800/3451, loss = 184.3304\n",
      "Epooch: 2/4, step: 900/3451, loss = 181.6518\n",
      "Epooch: 2/4, step: 1000/3451, loss = 61.3145\n",
      "Epooch: 2/4, step: 1100/3451, loss = 83.6300\n",
      "Epooch: 2/4, step: 1200/3451, loss = 68.4504\n",
      "Epooch: 2/4, step: 1300/3451, loss = 135.5537\n",
      "Epooch: 2/4, step: 1400/3451, loss = 384.0709\n",
      "Epooch: 2/4, step: 1500/3451, loss = 317.1556\n",
      "Epooch: 2/4, step: 1600/3451, loss = 99.5302\n",
      "Epooch: 2/4, step: 1700/3451, loss = 108.8202\n",
      "Epooch: 2/4, step: 1800/3451, loss = 222.5828\n",
      "Epooch: 2/4, step: 1900/3451, loss = 325.1010\n",
      "Epooch: 2/4, step: 2000/3451, loss = 368.8782\n",
      "Epooch: 2/4, step: 2100/3451, loss = 249.3399\n",
      "Epooch: 2/4, step: 2200/3451, loss = 144.9715\n",
      "Epooch: 2/4, step: 2300/3451, loss = 153.9110\n",
      "Epooch: 2/4, step: 2400/3451, loss = 217.8730\n",
      "Epooch: 2/4, step: 2500/3451, loss = 255.0473\n",
      "Epooch: 2/4, step: 2600/3451, loss = 277.2592\n",
      "Epooch: 2/4, step: 2700/3451, loss = 137.7864\n",
      "Epooch: 2/4, step: 2800/3451, loss = 159.1893\n",
      "Epooch: 2/4, step: 2900/3451, loss = 205.8969\n",
      "Epooch: 2/4, step: 3000/3451, loss = 109.2767\n",
      "Epooch: 2/4, step: 3100/3451, loss = 201.1744\n",
      "Epooch: 2/4, step: 3200/3451, loss = 359.7517\n",
      "Epooch: 2/4, step: 3300/3451, loss = 291.8517\n",
      "Epooch: 2/4, step: 3400/3451, loss = 714.2390\n",
      "Epooch: 3/4, step: 100/3451, loss = 276.3080\n",
      "Epooch: 3/4, step: 200/3451, loss = 77.4471\n",
      "Epooch: 3/4, step: 300/3451, loss = 443.5216\n",
      "Epooch: 3/4, step: 400/3451, loss = 335.3640\n",
      "Epooch: 3/4, step: 500/3451, loss = 98.1390\n",
      "Epooch: 3/4, step: 600/3451, loss = 926.4880\n",
      "Epooch: 3/4, step: 700/3451, loss = 299.4728\n",
      "Epooch: 3/4, step: 800/3451, loss = 457.9758\n",
      "Epooch: 3/4, step: 900/3451, loss = 47.5488\n",
      "Epooch: 3/4, step: 1000/3451, loss = 227.0009\n",
      "Epooch: 3/4, step: 1100/3451, loss = 411.5240\n",
      "Epooch: 3/4, step: 1200/3451, loss = 64.7631\n",
      "Epooch: 3/4, step: 1300/3451, loss = 234.6132\n",
      "Epooch: 3/4, step: 1400/3451, loss = 350.0162\n",
      "Epooch: 3/4, step: 1500/3451, loss = 317.7758\n",
      "Epooch: 3/4, step: 1600/3451, loss = 310.4756\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/f_/h4870ndd4q3b0bssqc3g47180000gn/T/ipykernel_71431/2514705651.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mepoch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_epochs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mbatch_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_loader\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m         \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m         \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscores\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    631\u001b[0m                 \u001b[0;31m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    632\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 633\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    634\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_yielded\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    635\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_kind\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_DatasetKind\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIterable\u001b[0m \u001b[0;32mand\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    675\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    676\u001b[0m         \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 677\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_fetcher\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    678\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    679\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory_device\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36mfetch\u001b[0;34m(self, possibly_batched_index)\u001b[0m\n\u001b[1;32m     49\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitems__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     49\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitems__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, index)\u001b[0m\n\u001b[1;32m    227\u001b[0m         \"\"\"\n\u001b[1;32m    228\u001b[0m         \u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msamples\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 229\u001b[0;31m         \u001b[0msample\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    230\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    231\u001b[0m             \u001b[0msample\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36mdefault_loader\u001b[0;34m(path)\u001b[0m\n\u001b[1;32m    266\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0maccimage_loader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    267\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 268\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mpil_loader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    269\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    270\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/torchvision/datasets/folder.py\u001b[0m in \u001b[0;36mpil_loader\u001b[0;34m(path)\u001b[0m\n\u001b[1;32m    246\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    247\u001b[0m         \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 248\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mimg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconvert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"RGB\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    249\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/PIL/Image.py\u001b[0m in \u001b[0;36mconvert\u001b[0;34m(self, mode, matrix, dither, palette, colors)\u001b[0m\n\u001b[1;32m    899\u001b[0m         \"\"\"\n\u001b[1;32m    900\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 901\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    902\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    903\u001b[0m         \u001b[0mhas_transparency\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"transparency\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.9/site-packages/PIL/ImageFile.py\u001b[0m in \u001b[0;36mload\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    255\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    256\u001b[0m                             \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 257\u001b[0;31m                             \u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merr_code\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdecoder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    258\u001b[0m                             \u001b[0;32mif\u001b[0m \u001b[0mn\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    259\u001b[0m                                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "\n",
    "start_time = time.time()\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    for batch_id, (data, labels) in enumerate(train_loader):\n",
    "        scores = model(data)\n",
    "        loss = criterion(scores, labels)\n",
    "        \n",
    "        \n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        \n",
    "        if (batch_id+1) % 100 == 0:\n",
    "            print(f'Epooch: {epoch+1}/{num_epochs}, step: {batch_id+1}/{n_total_steps}, loss = {loss.item():.4f}')\n",
    "\n",
    "            \n",
    "            \n",
    "end_time = time.time()\n",
    "total_time = end_time-start_time\n",
    "print(f'Training abgeschlossen in {total_time:.2f} Sekunden')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "390d5d84",
   "metadata": {},
   "source": [
    "### IV. c) Evaluating Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18a94c3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.eval()\n",
    "\n",
    "num_samples = 0\n",
    "num_correct = 0\n",
    "\n",
    "n_class_samples = [0 for i in range (num_classes)]\n",
    "n_class_correct = [0 for i in range (num_classes)]\n",
    "\n",
    "with torch.no_grad():  # Deaktivieren des Gradienten-Tracking, um Speicher zu sparen\n",
    "    for images, labels in train_loader:\n",
    "        outputs = model(images)\n",
    "        _, predicted = torch.max(outputs, 1) #torch.max returns (value, index)\n",
    "        \n",
    "        num_correct += (predicted == labels).sum().item()\n",
    "        num_samples += labels.size(0)\n",
    "        \n",
    "        for i in range(labels.size(0)):\n",
    "            label = labels[i].item()\n",
    "            pred = predicted[i].item()\n",
    "            if (label == pred):\n",
    "                n_class_correct[label] += 1\n",
    "            n_class_samples[label] += 1\n",
    "            \n",
    "    accuracy = num_correct / num_samples\n",
    "    print(f'Accuracy auf dem Trainingsdatensatz: {100 * accuracy:.2f}%')\n",
    "    \n",
    "    for i in range(num_classes):\n",
    "        acc = 100.0 * n_class_correct[i] / n_class_samples[i]\n",
    "        print(f'Accuracy of {classes[i]}: {acc} %')\n",
    "\n",
    "        \n",
    "model.train()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1502bf2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da74d11d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7cb875c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4d79d40",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b03a53a6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "77bfd1f8",
   "metadata": {},
   "source": [
    "# Tests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8950769e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
